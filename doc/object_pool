
namespace ascs
{

对象池类，用于管理正常的和失效的连接，对象重用，定时删除已经关闭的连接等；
注意，只能管理由ascs::socket派生的对象
template<typename Object>
class object_pool: public service_pump::i_service, public timer
{
public:
	typedef std::shared_ptr<Object> object_type;
	typedef const object_type object_ctype;
	typedef std::unordered::unordered_map<uint_fast64_t, object_type> container_type;

protected:
	object_pool(service_pump& service_pump_);

	void start();
开始，根据宏开启一些定时器，比如如果未定义REUSE_OBJECT，则开启一个定时器用于定时查找已经关闭的连接。

	void stop();
结束，关闭所有定时器。

	bool add_object(object_ctype& object_ptr);
添加一个对象，注意对象总数不能超过ASCS_MAX_OBJECT_NUM。

	bool del_object(object_ctype& object_ptr);
清除一个对象（从对象池移出到临时链表，并不真正的从内存中释放该对象）。

	virtual void on_create(object_ctype& object_ptr);
每创建（包括重用）一个对象之后，回调这个函数，用户可以做一些在对象池层面上的逻辑，比如额外的初始化工作等。

	void init_object(object_ctype& object_ptr);
内部使用，目前只是给对象赋一个唯一的ID。

	object_type change_object_id(object_ctype& object_ptr, uint_fast64_t id)
将无效对象（其id等于id）恢复到object_ptr，如果成功，object_ptr的take_over函数将被回调，同时object_ptr的id已经被修改为id。

#if defined(ASCS_REUSE_OBJECT) && !defined(ASCS_RESTORE_OBJECT)
	object_type reuse_object();
查找可重用的对象，如果没有，返回空的智能指针。能被重用的对象必需是：
 1. 已经从对象池移到了临时链表里面；
 2. 对象的引用记数（对象是一个shared_ptr）必须是1；
 3. 对象的obsoleted函数必须返回true。
#endif

	template<typename Arg>
	object_type create_object(Arg& arg);
	template<typename Arg1, typename Arg2>
	object_type create_object(Arg1& arg1, Arg2& arg2);
如果定义了ASCS_REUSE_OBJECT宏，则先调用reuse_object尝试重用对象，如果没有对象可被重用，
则创建一个新的，最后都是调用init_object。

	object_type create_object();
helper函数，以i_server::sp为参数调用create_obbject。

public:
	container_type& container();
用于配置unordered_set，比如设置负载因子，预分配空间等。注意必须在service_pump启动之前调用，因为没有锁相应的mutex。

	size_t max_size() const;
	void max_size(size_t _max_size);
对象池最大容量，可运行时修改。占用内存是动态分配的，只有有效的对象（包括等待被重用的对象）会占用内存。

	size_t size();
对象池中的对象个数，不包括被移除到临时链表的对象。

	object_type find(uint_fast64_t id);
根据id查找有效对象。

	object_type at(size_t index);
获取指定位置的有效对象（连接池中的对象），位置序号从0开始，复杂度O(n)。

	size_t invalid_object_size();
获取无效对象总数（临时链表里面的对象），无效对象要么定时被删除，要么等待被重用，由宏控制。

	object_type invalid_object_find(uint_fast64_t id);
根据id查找无效对象，复杂度O(n)。

	object_type invalid_object_at(size_t index);
获取指定位置的无效对象，位置序号从0开始，复杂度O(n)。

	object_type invalid_object_pop(uint_fast64_t id);
根据id查找无效对象，并且从容器中删除，复杂度O(n)。

	void list_all_object();
列出所有有效对象。

	void clear_obsoleted_object(container_type& objects);
删除对象池里面的所有无效对象（移出到临时链表）。

	void free_object(size_t num = -1);
释放指定数量的无效对象，如果对象重用开启，则无效对象永远不会释放（而是等待被重用），在某些情况下，你可能不需要
这么多等待被重用的无效对象，可以用这个函数来释放一些无效对象。

	template<typename _Predicate> void do_something_to_all(const _Predicate& __pred);
	template<typename _Predicate> void do_something_to_one(const _Predicate& __pred);
对调用一个对象调用__pred，只操作有效对象。

protected:
	std::atomic_uint_fast64_t cur_id;
当前已经分配到哪个id了，用于为每一个通过object_pool::create_object创建的对象分配一个唯一的id。

	container_type object_can;
	std::shared_mutex object_can_mutex;
	size_t max_size_;
存放有效对象（hash表）。

	std::list<invalid_object> invalid_object_can;
	std::shared_mutex invalid_object_can_mutex;
存放无效对象（对象池，双向链表）。
};

} //namespace

