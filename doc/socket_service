
socket_service主要是实现service_pump::i_service接口，以便service_pump能启动它，用在tcp客户端和udp两端。
single_socket_service只包括一个套接字，如果你需要一系列套接字，则使用multi_socket_service。

namespace ascs
{

只支持一条连接的客户端（或者说一个套接字），tcp和udp通用
template<typename Socket>
class single_socket_service : public service_pump::i_service, public Socket
{
public:
	single_socket_service(service_pump& service_pump_);

protected:
	virtual void init();
	virtual void uninit();
实现i_service的纯虚接口，供service_pump在start_service/stop_service时调用，这两个接口其实就是实现了开始和结束逻辑，开始意味着什么由Socket决定，
这个我们在前面讲socket、tcp::socket_base、udp::socket_base、tcp::client_socket和tcp::server_socket的时候，已经说过多次了。
};

支持多条连接的客户端（或者说多个套接字），tcp和udp通用，其实它更像一个容器，只是在object_pool上扩展了一些helper函数
template<typename Socket, typename Pool>
class multi_socket_service : public Pool
{
protected:
	multi_socket_service(service_pump& service_pump_);

	template<typename Arg>
	multi_socket_service(service_pump& service_pump_, Arg arg);
后者由ssl使用。

	virtual void init();
实现i_service的纯虚接口，供service_pump在start_service时调用，跟single_socket_service::init功能一样，只是对所有套接字都做一个“开始”操作。

public:
	bool add_socket(typename Pool::object_ctype& socket_ptr, bool reset = true);
添加一个连接到对象池，并调用socket_ptr->start()，如果reset为true，那么在这之前还会先调用socket_ptr->reset()。

	using Pool::create_object;
对客户端开放对象创建功能。
};

} //namespace

